#!/usr/bin/env bash

shopt -s extglob

BUILDERDIR="$(dirname "$0")"

# variables needed later.
start_dir=`pwd`
nginx_install_dir="$HOME/nginx"
stage_dir="$start_dir/tmp"
nginx_stage_dir="$stage_dir/stage"
nginx_download_url="http://nginx.org/download/nginx-1.0.14.tar.gz"  #TODO configurable?
#php_download_url="http://www.php.net/get/php-5.4.0.tar.gz/from/us.php.net/mirror" #php 5.4
php_download_url=http://www.php.net/get/php-5.3.10.tar.gz/from/us1.php.net/mirror #php 5.3.10
php_stage_dir="$stage_dir/phpstage"
php_install_dir="$HOME/php-env"
conf_dir="$HOME/conf"

# functions
msg() {
    echo -e "\033[1;32m-->\033[0m $0:" $*
}

die() {
    msg $*
    exit 1
}

move_to_approot() {
    [ -n "$SERVICE_APPROOT" ] && cd $SERVICE_APPROOT
}

install_php() {
   msg "installing php into: $php_download_url"
  
      if [ ! -d $php_install_dir ] ; then
      
       # if [ -d $php_install_dir ] ; then
       #   rm -rf $php_install_dir
       # fi
       
          msg "making directory: $php_install_dir "
          mkdir -p $php_install_dir

          msg "making directory: $php_stage_dir "
          mkdir -p $php_stage_dir

          msg "downloading php from ($php_download_url) and untaring into ($php_stage_dir) "
          wget -O - $php_download_url | tar -C $php_stage_dir --strip-components=1 -zxf -
          [ $? -eq 0 ] || die "can't fetch php"

          msg "Successfully download and untarred php"

          msg "move into $php_stage_dir "
          cd $php_stage_dir

          msg "trying to compile php, and then install it"
          #TODO the configure params need to be optimized and cleaned up. not everything here, need to add more?
              ./configure --prefix=$php_install_dir \
              --enable-fpm \
              --with-regex=php \
              --disable-rpath \
              --disable-static \
              --with-pic \
              --with-zlib \
              --with-curl \
              --with-curlwrappers \
              --enable-ftp \
              --with-mysql \
              --with-jpeg-dir \
              --with-png-dir \
              --with-gd \
              --enable-gd-native-ttf \
              --with-freetype-dir \
              --enable-zip \
              --with-openssl \
              --enable-mbstring  \
              --enable-inline-optimization \
              --disable-debug \
              --with-config-file-path=$conf_dir \
              --with-fpm-user=www \
              --with-fpm-group=www \
              --with-libdir=lib64 && make && make install
          [ $? -eq 0 ] || die "php install failed"

          msg "change directories back to $start_dir"
          cd $start_dir
     
     else
          msg "php already installed, skipping this step."
     fi
}


install_nginx() {
    local nginx_url=$nginx_download_url

    msg "installing Nginx into: $nginx_install_dir"

    # install nginx
    if [ ! -d $nginx_install_dir ] ; then
        msg "making directory: $nginx_install_dir "
        mkdir -p $nginx_install_dir
        
        msg "making directory: $nginx_stage_dir "
        mkdir -p $nginx_stage_dir

        msg "downloading nginx from ($nginx_url) and untaring into ($nginx_stage_dir) "
        wget -O - $nginx_url | tar -C $nginx_stage_dir --strip-components=1 -zxf -
        [ $? -eq 0 ] || die "can't fetch nginx"

        msg "Successfully download and untarred nginx"
        
        msg "move into $nginx_stage_dir "
        cd $nginx_stage_dir 

        msg "trying to compile nginx, and then install it"
        export CFLAGS="-O3 -pipe"
           ./configure   \
            --prefix=$nginx_install_dir \
            --with-http_addition_module \
            --with-http_dav_module \
            --with-http_geoip_module \
            --with-http_gzip_static_module \
            --with-http_realip_module \
            --with-http_stub_status_module \
            --with-http_ssl_module \
            --with-http_sub_module \
            --with-http_xslt_module && make && make install
        [ $? -eq 0 ] || die "Nginx install failed"

        msg "Successfully compiled and installed nginx"

        msg "remove some of the default config files from the nginx config directory that aren't needed"
        rm $nginx_install_dir/conf/*.default

        msg "cleaning up ($stage_dir) since it is no longer needed."
        rm -rf $stage_dir

        msg "change directories back to $start_dir"
        cd $start_dir

        msg "finished installing nginx."
    else
        msg "Nginx already installed, skipping this step."
    fi
}

build_profile(){
    cat > $start_dir/profile << EOF
export PATH="$nginx_install_dir/sbin:$PATH"
EOF

}

install_application() {

    msg "change directories to $start_dir"
    cd $start_dir

    msg "moving $start_dir/profile to ~/"
    mv $start_dir/profile ~/

    msg "moving $BUILDERDIR/php-fpm.sh to ~/"
    mv $BUILDERDIR/php-fpm.sh ~/

    msg "create $conf_dir"
    mkdir -p $conf_dir
    
    msg "moving $BUILDERDIR/php.ini to $conf_dir"
    mv $BUILDERDIR/php.ini $conf_dir/

    msg "moving $BUILDERDIR/php-fpm.conf to $conf_dir"
    mv $BUILDERDIR/php-fpm.conf $conf_dir/
    
    msg "cleaning up ($stage_dir) since it is no longer needed."
    rm -rf $stage_dir

    # Use ~/code and ~/current like the regular python service for better compatibility
    msg "installing application to ~/current/ from $start_dir"
    rsync -avH --delete --exclude "data" --exclude "README.rst" * ~/current/
}

# lets get started.

msg "Step 0: getting ready for build::"
move_to_approot

msg "Step 2: install php::"
install_php

msg "Step 3: install nginx::"
install_nginx

msg "Step 4: build profile::"
build_profile

msg "Step 6: install application::"
install_application

#msg "Step 7: install application specific requirements::"
#install_requirements
# TODO still need to be able to support installing requirements.

msg "All done..."